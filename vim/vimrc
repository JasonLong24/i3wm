"---------------------------------------------------------------------------
" Vim Plug{{{ 
call plug#begin('~/.vim/plugged')

" Utils
Plug 'https://github.com/godlygeek/tabular'
Plug 'https://github.com/mhinz/vim-signify'
Plug 'https://github.com/junegunn/fzf'
Plug 'https://github.com/pboettch/vim-highlight-cursor-words'
Plug 'https://github.com/vimplugin/project.vim'
Plug 'https://github.com/ervandew/supertab'

Plug 'https://github.com/garbas/vim-snipmate'
Plug 'https://github.com/MarcWeber/vim-addon-mw-utils.git'
Plug 'https://github.com/tomtom/tlib_vim.git'

" Theming
Plug 'https://github.com/pR0Ps/molokai-dark'
Plug 'https://github.com/tomasr/molokai'
Plug 'https://github.com/mitsuhiko/fruity-vim-colorscheme'
Plug 'https://github.com/sjl/badwolf'

" Pandoc
Plug 'https://github.com/suan/vim-instant-markdown'
Plug 'https://github.com/plasticboy/vim-markdown'

call plug#end()
"}}}
"---------------------------------------------------------------------------
" Initializing{{{

syntax on
"set t_Co=256
scriptencoding utf-8
let mapleader = ","
let g:EasyMotion_leader_key = '<Leader>' 
"}}}
"---------------------------------------------------------------------------
" set theme to darkbackground{{{

set background=dark
set hlsearch
colorscheme badwolf 
"let g:hybrid_custom_term_colors = 1
"}}}
"---------------------------------------------------------------------------
" line numbering and indentation{{{

set number
set relativenumber
filetype plugin indent on
set nowrap
set tabstop=2
set shiftwidth=2
set expandtab
"set smartindent
set autoindent

set nocompatible   " Disable vi-compatibility
set laststatus=2   " Always show the statusline
set encoding=utf-8 " Necessary to show Unicode glyphs
"}}}
"---------------------------------------------------------------------------
" File Settings{{{

set fileformat=unix
set fileformats=unix
set fileencoding=utf-8
set fileencodings=utf-8
set encoding=utf-8
set ambiwidth=double

set backup
set showcmd
"}}}
"---------------------------------------------------------------------------
" Command rempas{{{

set backspace=indent,eol,start

command! Wq :wq
command! W :w
command! Q :q
command! Wa :wa
command! Qa :qa
command! Wqa :wqa
cabbrev fzf FZF 
command! WW :w !sudo dd of=%
"}}}
"---------------------------------------------------------------------------
" Binding remaps{{{

"---[ Window Manipulaton ]---"
noremap <TAB><TAB> :source %<CR>
noremap <TAB>q <C-W>w
noremap <TAB>r <C-W>r
noremap <TAB>h <C-W>h
noremap <TAB>j <C-W>j
noremap <TAB>k <C-W>k
noremap <TAB>l <C-W>l
noremap <TAB>hh <C-W>H
noremap <TAB>jj <C-W>J
noremap <TAB>kk <C-W>K
noremap <TAB>ll <C-W>L

noremap <C-c> "+y \| :!sh -xc '~/i3wm/i3/Scripts/paste.sh'<CR>
noremap <C-x> :! pandoc --mathjax --toc -o '%:p:h'/out.pdf '%:p:h'/*.md \| zathura '%:p:h'/out.pdf &<CR><CR> 
noremap <C-z> :! ant -f ~/Github/workspace/2018-bot/build.xml<CR> 
" noremap <TAB>s <C-W>s
" noremap <TAB>v <C-W>v

" End and beginnging line
noremap H ^
noremap L g_

" Very magic search
nnoremap +/ /\v
vnoremap +/ /\v

map <F3> :setlocal spell! spelllang=en_us<CR> 
map <F5> :setlocal foldmethod=marker<CR> 
map <F6> mzgg=G`z`<CR>

map <C-F> :fzf<CR>
map <C-R> :%s/
"---[ Fuzzy Finder ]---"
nnoremap <silent> <TAB>v :call fzf#run({
      \   'sink':  'vertical botright split' })<CR>

nnoremap <silent> <TAB>x :call fzf#run({
      \   'sink': 'botright split' })<CR>

noremap <silent> <TAB>b call fzf#run({'source': map(range(1, bufnr('$')), 'bufname(v:val)'),
      \ 'sink': 'e', 'down': '30%'})

noremap <silent> <leader><space> :noh<cr>:call clearmatches()<cr>

"---[ Quick Movement ]---"
noremap <Space><TAB> <Esc>/<++><Enter>cw<Right>
noremap <Space>q <Esc>i<Right><++><Esc>

xnoremap K :move '<-2 <CR> gv=gv
xnoremap J :move '>+1 <CR> gv=gv

noremap <C-y> <C-y><C-y><C-y>
noremap <C-e> <C-e><C-e><C-e>

"}}}
"---------------------------------------------------------------------------
" Buffers{{{

map <Leader>a :bprev<Return>
map <Leader>s :bnext<Return>
map <Leader>d :bd<Return>
map <Leader>f :b

au BufWinLeave * silent mkview
"au BufWinEnter * silent loadview
augroup AutoSaveFolds
  autocmd!
  autocmd BufWinLeave * silent mkview
  autocmd BufWinEnter * silent loadview
augroup END

"}}}
"---------------------------------------------------------------------------
" Functions"{{{

if has ('persistent_undo')
  set undodir=$HOME/.vim_undo
  set undolevels=5000
  set undofile
endif

" > FZF Buffer
function! s:buflist()
  redir => ls
  silent ls
  redir END
  return split(ls, '\n')
endfunction

function! s:bufopen(e)
  execute 'buffer' matchstr(a:e, '^[ 0-9]*')
endfunction

nnoremap <silent> <Space><Space> :call fzf#run({
      \   'source':  reverse(<sid>buflist()),
      \   'sink':    function('<sid>bufopen'),
      \   'options': '+m',
      \   'down':    len(<sid>buflist()) + 2
      \ })<CR>

"}}}
" --------------------------------------------------------------------------
"  Project"{{{

let g:proj_window_width = 34
let g:proj_window_increment = 0
nmap <silent> <Space>p :call ToggleSExplorer()<CR><Plug>ToggleProject
nmap <silent> <F2> :call ToggleSExplorer()<CR><Plug>ToggleProject

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
function! ToggleSExplorer()
  if exists("t:expl_buf_num")
    let expl_win_num = bufwinnr(t:expl_buf_num)
    if expl_win_num != -1
      let cur_win_nr = winnr()
      exec expl_win_num . 'wincmd w'
      close
      exec cur_win_nr . 'wincmd w'
      unlet t:expl_buf_num
    else
      close
      unlet t:expl_buf_num
    endif
  else
    exec '1wincmd w'
    Sexplore 
    let t:expl_buf_num = bufnr("%")
  endif
endfunction
"}}}
"---------------------------------------------------------------------------
" Statusbar "{{{

let g:currentmode={ 'n' : 'Normal ', 'no' : 'N·Operator Pending ', 'v' : 'Visual ', 'V' : 'V·Line ', '^V' : 'V·Block ', 's' : 'Select ', 'S': 'S·Line ', '^S' : 'S·Block ', 'i' : 'Insert ', 'R' : 'Replace ', 'Rv' : 'V·Replace ', 'c' : 'Command ', 'cv' : 'Vim Ex ', 'ce' : 'Ex ', 'r' : 'Prompt ', 'rm' : 'More ', 'r?' : 'Confirm ', '!' : 'Shell ', 't' : 'Terminal '}

function! ModeCurrent() abort
  let l:modecurrent = mode()
  let l:modelist = toupper(get(g:currentmode, l:modecurrent, 'V·Block '))
  let l:current_status_mode = l:modelist
  return l:current_status_mode
endfunction

set statusline=\ %{ModeCurrent()}>>\ 
set statusline+=%#PmenuSel#
set statusline+=\ %r%m[%n][%f]\ 
set statusline+=%#LineNr#
set statusline+=%=%#PmenuSel#
set statusline+=%=\ %P\ %p%%
set statusline+=%=\ (%l/%L)
set statusline+=\ <<

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=blue ctermfg=blue guifg=white ctermbg=white
  elseif a:mode == 'r'
    hi statusline guibg=Purple ctermfg=5 guifg=Black ctermbg=0
  endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=DarkGrey ctermfg=8 guifg=White ctermbg=15
hi statusline guibg=DarkGrey ctermfg=darkgrey guifg=White ctermbg=white
"}}}
"---------------------------------------------------------------------------
" Pairs{{{
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap " ""<Left>
inoremap ' ''<Left>
inoremap < <><Left>
inoremap ` ``<Left>

function! PairsBackSpace() abort
  let cur_line = getline('.')
  let before_char = cur_line[col('.')-2]
  let after_char = cur_line[col('.')-1]
  if (before_char == '(' && after_char == ')') || (before_char == '{' && after_char == '}') || (before_char == '[' && after_char == ']') || (before_char == '"' && after_char == '"') || (before_char == '`' && after_char == '`') || (before_char == '<' && after_char == '>') || (before_char == "'" && after_char == "'")
    return "\<Del>\<BS>"
  else
    return "\<BS>"
  endfunction
  inoremap <silent> <BS> <C-r>=PairsBackSpace()<CR>

  "}}}
  "---------------------------------------------------------------------------
  " Settings things{{{

  set path+=**
  set wildmenu
  set nocompatible
  set noswapfile
  set shortmess=a
  set cmdheight=2
  set showcmd
  set showmode
  set foldcolumn=2
  set foldmethod=indent

  " HiCursorWords
  let g:HiCursorWords_linkStyle='Underlined'
  " let g:HiCursorWords_debugEchoHiName = 1
  let g:HiCursorWords_delay = 100
  " let g:indentLine_color_term = 254
  let g:indentLine_char = '▏'
  "}}}
