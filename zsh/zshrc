#
# User configuration sourced by interactive shells
#


# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="crunch"

# Key Binds# {{{
bindkey -s '^e' 'vim $(fzf)\n' 
bindkey -s '^w' '. ~/.zshrc\nclear\n'
function up_widget() {
      BUFFER="cd .."
      zle accept-line
}
zle -N up_widget
bindkey "^k" up_widget
# }}}
# Vim Aliases# {{{
function viz {
  vim $(fzf)
}

function cs() {
    cd "$@"
    ls --color=force  
}

function vif() {
    i3 fullscreen toggle & vim "$@"
    clear
}
# }}}
# Tmux Aliases# {{{
function tmuxn(){ tmux new -s "$@" }
function tmuxk() { tmux kill-session -t "$@" }
function tmuxa() { tmux a -t "$@" }

function tmuxj-hard() {
  tmux split-window -h -p 30 '/opt/SceneBuilder/SceneBuilder' 
  tmux split-window -v '~/eclipse/eclipse'
  vim ~/Github/workspace
}

function tmuxj-soft() {
  tmux split-window -h -p 30 ''
  vim ~/Github/workspace
}
# }}}
# Pacman Aliases# {{{
function pacup() { sudo pacman -Sy && sudo abs && sudo aur }
function pacls() { pacman -Qi }
function yaup() { yaourt -Sy && sudo abs && sudo aur }
function yals() { yaourt -Qi }
function yamir() { yaourt -Syy }

function pac() {
    echo "Aliases for common pacman and yaourt commands

      pacup
        Update and refresh local package, ABS and AUR databases
      pacls
        Display information about a package in the local database
      yaup
        Update and refresh local package, ABS and AUR databases
      yals
        Display information about a package in the local database
      yamir
        Force refresh of all package lists after updating mirrorlist
    "
}

function ya() { pac }
# }}}
# Apt Aliases# {{{
function aptup() { sudo apt-get update }
function aptupgr() { sudo apt-get upgrade }
function aptcln() { sudo apt-get clean }
function aptinst() { sudo apt-get install "$1" }
function aptprg() { sudo apt-get purge "$1" }
# Apt Cache
function aptshow() { sudo apt-cache show "$1" }
function aptdep() { sudo apt-cache showpkg "$1" }
# }}}
# Disk Usage# {{{
function disu() {
	if [ "" = "$1" ]
	then
		df -h
	elif [ -h = "$1" ]
	then
     		df -h | grep sda2
	elif [ -f = "$1" ]
	then
		df -h | grep "$2" 
	elif [ -u = "$1" ]
	then
		df -h | awk '{ print $1,"-- " $3 }'
	elif [ -help = "$1" ]
	then
		echo "Disu lists the disk usage on your computer
		
			-h
			  Gets space on the main partition
			-d
			  Gets the space on all partitions
			-u
			  Gets the used space on all of the partitions
			-help
			  You're looking at it
				"
	else
		echo "Try 'disu -help' for help"
	fi
}
# }}}
# General Aliases# {{{
function reloadzsh() {
     . ~/.zshrc
}

function os() {
  screenfetch | grep -o 'OS:.*'
}

function conf() {
	cd ~/i3wm
}

function govim() {
	cd ~/.vim/"$@"
}

function forcast() {
        curl wttr.in/"$@"
}
# }}}
# Markdown# {{{
function mdpdf() {
  if [ "" = "$1" ]
  then
        markdown-pdf "$1" --out "$2"
  elif [ -h = "$1" ]
  then
        echo "
      Usage: mdpdf [OPTION] <Markdown File> <Path>"
  elif [ -b = "$1" ] 
  then
        markdown-pdf "$2" --out ~/Notes/2017-2018/Biology/pdf/"$3"
  elif [ -g = "$1" ] 
  then
        markdown-pdf "$2" --out ~/Notes/2017-2018/Gov/pdf/"$3"
  fi
}

function mdc() {
  if [ -d = "$1" ]
  then
    rm "$2"
    pandoc --mathjax --toc -o "$2" "$3"/*.md
    evince "$2"
  else
    echo "Usage: mdc [OPTION] <Output Path> <Directory>"
  fi
}
# }}}
# Sync# {{{
function sync() {
  read -p "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
  echo "";
  if [[ $REPLY =~ ^[Yy]$ ]]; then 
    echo "Syncing files..."
    echo "================="

    git pull origin master

    echo "Syncing i3 Config... "
		rm -r $HOME/.config/i3/config
		ln $HOME/i3wm/i3 $HOME/.config/i3/config

    echo "Syncing Polybar Config... "
    rm -r $HOME/.config/polybar/config
    ln $HOME/i3wm/polybar/config $HOME/.config/polybar/config

    echo "Syncing .zshrc Config"
    rm -r $HOME/.zshrc
    ln $HOME/i3wm/zsh/zshrc $HOME/.zshrc

    echo "Syncing zsh Theme Config"
    rm -r $HOME/.oh-my-zsh/themes/jasonzsh.zsh-theme
    ln $HOME/i3wm/zsh/jasonzsh.zsh-theme $HOME/.oh-my-zsh/themes/jasonzsh.zsh-theme

    echo "Sync Finished... No errors found"
  else
    echo "Sync Stopped"
  fi
  
}
# }}}

# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git zsh-syntax-highlighting zsh-autopair)
function preexec() {
  timer=${timer:-$SECONDS}
}

#function precmd() {
#  if [ $timer ]; then
#    timer_show=$(($SECONDS - $timer))
#    export RPROMPT="%F{160}${timer_show}s %{$reset_color%}"
#    unset timer
#  fi
#}
  

function precmd() {
  if [ $? -eq 0  ]; then
    export RPROMPT="%F{46}:)"
  else
    export RPROMPT="%F{196}:("
  fi
}

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='mvim'
 fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
