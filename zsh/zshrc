# Set up the prompt

AltPrompt=tmux
# Plugins# {{{
source $HOME/i3wm/zsh/plugins/zsh-git-prompt/zshrc.sh
source $HOME/i3wm/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
function precmd {
	source $HOME/i3wm/zsh/plugins/zsh-autopair/autopair.zsh
	source $HOME/i3wm/zsh/plugins/zsh-git/git.sh
# }}}
# Theme# {{{
	BRACKET="%F{white}"
	SUDO="%F{red}"
	DIR="%F{cyan}"
	PROMPT="%F{white}"
	USER="%F{yellow}"
	GIT_BRANCH="%F{magenta}"
  ALTPROMPT="%F{red}"
	BLACKLIST=( "/home/jason/2018-bot" )

	# Git Prompt
	STATUS=false
	STATUS_SIMP=true
	# Functions# {{{
	function get_sudo() {
			if sudo -n true 2>/dev/null; then 
				 echo "sudo" 
			else
				 echo "" 
			fi
	}

 case $AltPrompt in
    tmux)
      session="("$(tmux ls | wc -l)")"
      ;;
    cpu)
      session="("$(top -bn 1 | grep "Cpu" | awk '{print $2}')")"
      ;;
    mem)
      session="("$(free -m | awk 'NR==2{print $3}')")"
      ;;
    hist)
      session="("$(history | cut -d " " -f4-15 | tail -1)")"
      ;;
    hist-num)
      session"("$(history | cut -d " " -f2)")"
      ;;
    *)
      session=""
      ;;
  esac
	# }}}
	
#  RPROMPT="$ALTPROMPT%B${session}%b"
	DIR="[$DIR%B%~%b$(git_info)$BRACKET]% "
	USER="$BRACKET@$USER%m"
	END="$PROMPT$ "

	PROMPT="$SUDO$(get_sudo)$USER$BRACKET$DIR$END%{$reset_color%}%"
}
# }}}
# Basics# {{{
bindkey -e
#export ZSH=$HOME/.oh-my-zsh
#export ZSHTHEME=$ZSH/themes/jason.zsh-theme
export VISUAL="vim"
export TERMINAL="xterm"
export HIST_STAMPS="mm.dd.yyyy"
export HISTSIZE=12000
export SAVEHIST=12000
export HISTFILE="$HOME/.zsh_history"
ZSH_THEME="jason"
setopt prompt_subst
setopt promptsubst
setopt append_history
setopt extended_history
setopt sharehistory
setopt hist_reduce_blanks
setopt always_to_end
setopt complete_in_word
setopt auto_menu
# }}}
# Key Binds# {{{
bindkey -s '^e' 'cd ~ && vim $(fzf)\n cd $OLDPWD\nclear\n'	
bindkey -s '^y' '. ~/.zshrc\nclear\n'
bindkey -s '^n' './tg/bin/telegram-cli -W -N\n'
function up_widget() {
      BUFFER="cd .."
      zle accept-line
}
zle -N up_widget
bindkey "^u" up_widget

# Nav Binds
bindkey '^w' forward-word
bindkey '^b' backward-word
bindkey '^d' kill-whole-line
bindkey -r "^k"
bindkey '^k' backward-kill-word
# }}}
# Vim Aliases# {{{
function viz {
  vim $(fzf)
}

function cs() {
    cd "$@"
    ls --color=force  
}

function vif() {
    i3 fullscreen toggle & vim "$@"
    clear
}
# }}}
# Tmux Aliases# {{{
function tmuxn() { tmux -2 new -s "$@" }
function tmuxk() { tmux kill-session -t "$@" }
function tmuxa() { tmux -2 a -t "$@" }

function tmuxj-hard() {
  tmux split-window -h -p 30 '/opt/SceneBuilder/SceneBuilder' 
  tmux split-window -v '~/eclipse/eclipse'
  vim ~/Github/workspace
}

function tmuxj-soft() {
  tmux split-window -h -p 30 ''
  vim ~/Github/workspace
}
# }}}
# Pacman Aliases# {{{
function pacup() { sudo pacman -Sy && sudo abs && sudo aur }
function pacls() { pacman -Qi }
function yaup() { yaourt -Sy && sudo abs && sudo aur }
function yals() { yaourt -Qi }
function yamir() { yaourt -Syy }

function pac() {
    echo "Aliases for common pacman and yaourt commands

      pacup
        Update and refresh local package, ABS and AUR databases
      pacls
        Display information about a package in the local database
      yaup
        Update and refresh local package, ABS and AUR databases
      yals
        Display information about a package in the local database
      yamir
        Force refresh of all package lists after updating mirrorlist
    "
}

function ya() { pac }
# }}}
# Apt Aliases# {{{
function aptup() { sudo apt-get update }
function aptupgr() { sudo apt-get upgrade }
function aptcln() { sudo apt-get clean }
function aptinst() { sudo apt-get install "$1" }
function aptprg() { sudo apt-get purge "$1" }
# Apt Cache
function aptshow() { sudo apt-cache show "$1" }
function aptdep() { sudo apt-cache showpkg "$1" }
# }}}
# Disk Usage# {{{
function disu() {
	if [ "" = "$1" ]
	then
		df -h
	elif [ -h = "$1" ]
	then
     		df -h | grep sda2
	elif [ -f = "$1" ]
	then
		df -h | grep "$2" 
	elif [ -u = "$1" ]
	then
		df -h | awk '{ print $1,"-- " $3 }'
	elif [ -help = "$1" ]
	then
		echo "Disu lists the disk usage on your computer
		
			-h
			  Gets space on the main partition
			-d
			  Gets the space on all partitions
			-u
			  Gets the used space on all of the partitions
			-help
			  You're looking at it
				"
	else
		echo "Try 'disu -help' for help"
	fi
}
# }}}
# General Aliases# {{{
function src() {
  local cache=$ZSH_CACHE_DIR
  autoload -U compinit zrecompile
  compinit -d "$cache/zcomp-$HOST"
 
  for f in ~/.zshrc "$cache/zcomp-$HOST"; do
  	zrecompile -p $f && command rm -f $f.zwc.old
  done
  
  source ~/.zshrc 
}

function extract {
  echo Extracting $1 ...
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xjf $1  ;;
          *.tar.gz)    tar xzf $1  ;;
          *.bz2)       bunzip2 $1  ;;
          *.rar)       unrar x $1    ;;
          *.gz)        gunzip $1   ;;
          *.tar)       tar xf $1   ;;
          *.tbz2)      tar xjf $1  ;;
          *.tgz)       tar xzf $1  ;;
          *.zip)       unzip $1   ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1  ;;
          *)        echo "'$1' cannot be extracted via extract()" ;;
      esac
  else
      echo "'$1' is not a valid file"
  fi
}

function os() {
  screenfetch | grep -o 'OS:.*'
}

function conf() {
	cd ~/i3wm/"$@"
}

function govim() {
	cd ~/.vim/"$@"
}

function forcast() {
        curl wttr.in/"$@"
}

function net() {
  if [ -l = $1 ]
  then
    printf "Pinging Google.com... \n"
    ping -c 5 google.com | awk 'NR==2,NR==6{print $8}' | cut -c 6-
    printf "Pinging 8.8.8.8... \n"
    ping -c 5 8.8.8.8 | awk 'NR==2,NR==6{print $7}' | cut -c 6-
		printf '\n'
		ip addr
  elif [ -s = $1 ]
  then
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python -
		printf '\n'
		ip addr
  else
    printf "Error... "
  fi
}

function comp-type() {
	type=$(ls /sys/class/power_supply | grep BAT)

	if [ "$type" != "BAT0" ]; then
		echo "desktop"
	else
		echo "laptop"
	fi
}

alias v='vim'
alias z='zathura'
alias ls='ls -Fh -I "*~" --color=always --group-directories'
alias ll='ls -hl -I "*~" --color=always --group-directories'
alias l='ls'
alias aa='sudo $(fc -ln -1)'
alias gotop='gotop --color=monokai'
alias tll='~/i3wm/i3/Scripts/tll.sh l'
alias tlc='~/i3wm/i3/Scripts/tll.sh c "$@"'
alias tla='~/i3wm/i3/Scripts/tll.sh a "$@"'
# }}}
# Markdown# {{{
function mdpdf() {
  if [ "" = "$1" ]
  then
        markdown-pdf "$1" --out "$2"
  elif [ -h = "$1" ]
  then
        echo "
      Usage: mdpdf [OPTION] <Markdown File> <Path>"
  elif [ -b = "$1" ] 
  then
        markdown-pdf "$2" --out ~/Notes/2017-2018/Biology/pdf/"$3"
  elif [ -g = "$1" ] 
  then
        markdown-pdf "$2" --out ~/Notes/2017-2018/Gov/pdf/"$3"
  fi
}

function mdc() {
  if [ -d = "$1" ]
  then
    rm "$2"
    pandoc --mathjax --toc -o "$2" "$3"/*.md
    evince "$2"
	elif [ -f = "$1" ]; then
		rm "$2"
		pandoc --mathjax --toc -o "$2" "$3"
		zathura "$2"
  else
    echo "Usage: mdc [OPTION] <Output Path> <Directory>"
  fi
}
# }}}
# Sync# {{{
function sync() {
    echo "Syncing files..."
    echo "================="

    cd ~/i3wm
    git pull origin master

     echo "Sync Finished... No errors found"
  
}

function kernel-update() {
	latest=$(w3m -dump kernel.ubuntu.com/~kernel-ppa/mainline/ | tail -5 | awk 'FNR == 1 {print $2}')
	echo -n "Version "$latest" (y/n)? "
	read answer
	if echo "$answer" | grep -iq "^y" ;then
  	  echo Yes

	rm -r ~/.kernel-deb/*.deb
  headersall=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/headers/ && /generic/ && /amd64/')
	echo "\n--> Headers amd64 found "$headersall""
  headersamd64=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/headers/ && /all/')
	echo "\n--> Headers all found "$headersamd64""
  image=$(w3m -dump http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$latest" | awk '{print $3}' | awk '/image/ && /generic/ && /amd64/')
	echo "\n--> Image found "$image""
	echo "\n"
	wget -P ~/.kernel-deb http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$headersall" http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$headersamd64" http://kernel.ubuntu.com/~kernel-ppa/mainline/"$latest""$image"

	echo "\n--> Installing kernel version "$latest""
	sudo dpkg -i ~/.kernel-deb/*.deb
	else
    	echo No
	fi
  
}
# }}}
# Zstyle # {{{
autoload -Uz compinit
compinit

zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' menu select=2
eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' menu select=long
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true

zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
# }}}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
